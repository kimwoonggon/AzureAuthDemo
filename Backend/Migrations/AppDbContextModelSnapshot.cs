// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Backend.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Authentication",
                            Content = "Azure AD 인증 설정 방법: 1. Azure Portal 접속 2. App Registration 생성 3. Client ID 및 Tenant ID 확인 4. Redirect URI 설정",
                            CreatedAt = new DateTime(2025, 9, 28, 10, 2, 15, 675, DateTimeKind.Utc).AddTicks(7000),
                            Title = "Azure AD 가이드",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = "Security",
                            Content = "JWT는 Header.Payload.Signature 구조로 되어 있으며, Base64로 인코딩됩니다. Access Token은 짧은 수명, Refresh Token은 긴 수명을 가집니다.",
                            CreatedAt = new DateTime(2025, 9, 28, 10, 2, 15, 675, DateTimeKind.Utc).AddTicks(7010),
                            Title = "JWT 토큰 이해하기",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = "Authentication",
                            Content = "PKCE(Proof Key for Code Exchange)는 Code Verifier와 Code Challenge를 사용하여 Authorization Code 가로채기 공격을 방지합니다.",
                            CreatedAt = new DateTime(2025, 9, 28, 10, 2, 15, 675, DateTimeKind.Utc).AddTicks(7010),
                            Title = "PKCE 플로우",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Category = "Security",
                            Content = "OAuth 2.0은 인증 프로토콜로 Resource Owner, Client, Authorization Server, Resource Server의 4가지 역할로 구성됩니다.",
                            CreatedAt = new DateTime(2025, 9, 28, 10, 2, 15, 675, DateTimeKind.Utc).AddTicks(7010),
                            Title = "OAuth 2.0 기본 개념",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Category = "Development",
                            Content = "Microsoft Authentication Library는 Azure AD 인증을 쉽게 구현할 수 있게 해주는 JavaScript 라이브러리입니다.",
                            CreatedAt = new DateTime(2025, 9, 28, 10, 2, 15, 675, DateTimeKind.Utc).AddTicks(7010),
                            Title = "MSAL.js 사용법",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Backend.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AzureId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.RefreshToken", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
